const POSE_CONNECTIONS = [
  { start: 0, end: 1 },
  { start: 1, end: 2 },
  { start: 2, end: 3 },
  { start: 3, end: 7 },
  { start: 4, end: 5 },
  { start: 5, end: 6 },
  { start: 6, end: 8 },
  { start: 9, end: 10 },
  { start: 0, end: 4 },
  { start: 11, end: 12 },
  { start: 11, end: 13 },
  { start: 13, end: 15 },
  { start: 15, end: 17 },
  { start: 15, end: 19 },
  { start: 15, end: 21 },
  { start: 17, end: 19 },
  { start: 12, end: 14 },
  { start: 14, end: 16 },
  { start: 16, end: 18 },
  { start: 16, end: 20 },
  { start: 16, end: 22 },
  { start: 18, end: 20 },
  { start: 11, end: 23 },
  { start: 12, end: 24 },
  { start: 23, end: 24 },
  { start: 23, end: 25 },
  { start: 24, end: 26 },
  { start: 25, end: 27 },
  { start: 26, end: 28 },
  { start: 27, end: 29 },
  { start: 28, end: 30 },
  { start: 29, end: 31 },
  { start: 30, end: 32 },
  { start: 27, end: 31 },
  { start: 28, end: 32 },
];
let avatar,
  bodypose,
  video,
  poses = [],
  particles = [],
  몸관절 = [],
  아바타관절 = [],
  파티클속도 = 3,
  파티클노이즈 = 0,
  파티클중력 = 0,
  fw = 1,
  fh = 1,
  연결점표시 = !0,
  cam,
  왼팔길이1 = 0,
  왼팔길이2 = 0,
  오른팔길이1 = 0,
  오른팔길이2 = 0,
  어깨너비 = 100,
  엉덩이너비 = 80,
  몸통길이 = 120,
  왼쪽어깨 = {},
  오른쪽어깨 = {},
  왼쪽다리 = {},
  오른쪽다리 = {},
  목길이 = 20,
  머리크기 = 50;
function preload() {
  (bodypose = ml5.bodypose("BlazePose", {
    modelType: "full",
    flipHorizontal: !0,
  })),
    이미지로드();
}
let 아바타설정,
  AvatarSetting = function () {
    (this.머리크기 = 머리크기),
      (this.어깨너비 = 어깨너비),
      (this.엉덩이너비 = 엉덩이너비),
      (this.몸통길이 = 몸통길이),
      (this.왼팔길이1 = 왼팔길이1),
      (this.왼팔길이2 = 왼팔길이2),
      (this.왼다리길이1 = 왼다리길이1),
      (this.왼다리길이2 = 왼다리길이2),
      (this.오른팔길이1 = 오른팔길이1),
      (this.오른팔길이2 = 오른팔길이2),
      (this.오른다리길이1 = 오른다리길이1),
      (this.오른다리길이2 = 오른다리길이2);
  };
function 초기설정() {
  let t = new dat.GUI();
  아바타설정 = new AvatarSetting();
  let e = t.addFolder("아바타설정");
  e.add(아바타설정, "머리크기", 10, 100).step(1).listen(),
    e.add(아바타설정, "어깨너비", 10, 300).step(1).listen(),
    e.add(아바타설정, "엉덩이너비", 10, 300).step(1).listen(),
    e.add(아바타설정, "몸통길이", 10, 300).step(1).listen(),
    e.add(아바타설정, "왼팔길이1", 10, 300).step(1).listen(),
    e.add(아바타설정, "왼팔길이2", 10, 300).step(1).listen(),
    e.add(아바타설정, "왼다리길이1", 10, 300).step(1).listen(),
    e.add(아바타설정, "왼다리길이2", 10, 300).step(1).listen(),
    e.add(아바타설정, "오른팔길이1", 10, 300).step(1).listen(),
    e.add(아바타설정, "오른팔길이2", 10, 300).step(1).listen(),
    e.add(아바타설정, "오른다리길이1", 10, 300).step(1).listen(),
    e.add(아바타설정, "오른다리길이2", 10, 300).step(1).listen(),
    (cam = createGraphics(640, 480)),
    (avatar = new Avatar()),
    (video = createCapture(VIDEO, function () {
      (fw = width / video.width), (fh = height / video.height);
    })).hide();
  for (let s = 0; s < 33; s++)
    (몸관절[s] = { x: -100, y: -100 }), (아바타관절[s] = { x: -100, y: -100 });
  bodypose.detectStart(video, gotPoses);
}
function gotPoses(t) {
  poses = t;
}
function 시작() {
  (머리크기 = 아바타설정.머리크기),
    (어깨너비 = 아바타설정.어깨너비),
    (엉덩이너비 = 아바타설정.엉덩이너비),
    (몸통길이 = 아바타설정.몸통길이),
    (왼팔길이1 = 아바타설정.왼팔길이1),
    (왼팔길이2 = 아바타설정.왼팔길이2),
    (왼다리길이1 = 아바타설정.왼다리길이1),
    (왼다리길이2 = 아바타설정.왼다리길이2),
    (오른팔길이1 = 아바타설정.오른팔길이1),
    (오른팔길이2 = 아바타설정.오른팔길이2),
    (오른다리길이1 = 아바타설정.오른다리길이1),
    (오른다리길이2 = 아바타설정.오른다리길이2),
    cam.background(0),
    cam.push(),
    cam.translate(640, 0),
    cam.scale(-1, 1),
    cam.image(video, 0, 0),
    cam.pop(),
    poses.length > 0 &&
      ((몸관절 = poses[0].keypoints.map((t) => ({ x: t.x * fw, y: t.y * fh }))),
      avatar.calculate());
}
function 아바타그리기() {
  poses.length > 0 &&
    (avatar.drawBody(),
    avatar.drawRightLeg(),
    avatar.drawLeftLeg(),
    avatar.drawHead(),
    avatar.drawRightArm(),
    avatar.drawLeftArm());
}
function 몸통그리기() {
  avatar.drawBody();
}
function 왼다리그리기() {
  avatar.drawRightLeg();
}
function 오른다리그리기() {
  avatar.drawLeftLeg();
}
function 왼팔그리기() {
  avatar.drawRightArm();
}
function 오른팔그리기() {
  avatar.drawLeftArm();
}
function 머리그리기() {
  avatar.drawHead();
}
function 끝() {
  for (let t = particles.length - 1; t >= 0; t--)
    particles[t].move(), particles[t].draw();
  for (let e = particles.length - 1; e >= 0; e--)
    particles[e].life < 0 && particles.splice(e, 1);
}
function 파티클생성(t, e, s) {
  particles.push(new Particle(t, e, s));
}
function drawPartsKeypoints() {
  if (poses.length > 0) {
    for (let t = 0; t < poses[0].lips.length; t++) {
      let e = poses[0].lips[t];
      fill(0, 255, 0), circle(e.x * fw, e.y * fh, 3);
    }
    for (let s = 0; s < poses[0].leftEye.length; s++) {
      let i = poses[0].leftEye[s];
      fill(0, 255, 0), circle(i.x * fw, i.y * fh, 3);
    }
    for (let n = 0; n < poses[0].rightEye.length; n++) {
      let h = poses[0].rightEye[n];
      fill(0, 255, 0), circle(h.x * fw, h.y * fh, 3);
    }
    for (let a = 0; a < poses[0].faceOval.length; a++) {
      let l = poses[0].faceOval[a];
      fill(0, 255, 0), circle(l.x * fw, l.y * fh, 3);
    }
    for (let r = 0; r < NOSE.length; r++) {
      let o = NOSE[r],
        $ = poses[0].keypoints[o];
      fill(0, 255, 0), circle($.x * fw, $.y * fh, 3);
    }
  }
}
function 아바타관절그리기() {
  if (poses.length > 0)
    for (let t = 0; t < 13; t++)
      stroke(0), fill(255), ellipse(아바타관절[t].x, 아바타관절[t].y, 20, 20);
}
function 몸관절그리기() {
  if (poses.length > 0)
    for (let t = 0; t < poses[0].keypoints.length; t++) {
      let e = poses[0].keypoints[t];
      fill(255),
        noStroke(),
        circle(e.x * fw, e.y * fh, 6),
        stroke(255),
        strokeWeight(2);
      let s = POSE_CONNECTIONS[t],
        i = poses[0].keypoints[s.start].x * fw,
        n = poses[0].keypoints[s.start].y * fh,
        h;
      line(
        i,
        n,
        poses[0].keypoints[s.end].x * fw,
        poses[0].keypoints[s.end].y * fh
      );
    }
}
function basicShape(t) {
  ellipse(0, 0, 10, 10);
}
class Particle {
  constructor(t, e, s = basicShape) {
    (this.x = t),
      (this.y = e),
      (this.ax = 0),
      (this.ay = 0),
      (this.gravity = 파티클중력),
      (this.vx = random(-1, 1) * 파티클속도),
      (this.vy = random(-1, 1) * 파티클속도),
      (this.angle = 0),
      (this.life = 255),
      (this.shape = s),
      (this.turbulence = 파티클노이즈);
  }
  move() {
    this.turbulence > 0 &&
      ((this.angle =
        noise(0.01 * this.x, 0.01 * this.y, 0.03 * frameCount) * TWO_PI * 2),
      (this.ax = 0.5 * Math.cos(this.angle)),
      (this.ay = 0.5 * Math.sin(this.angle))),
      (this.ay += this.gravity),
      (this.vx += this.ax),
      (this.vy += this.ay),
      (this.x = this.x + this.vx),
      (this.y = this.y + this.vy),
      (this.x < 0 || this.x > width || this.y < 0 || this.y > height) &&
        (this.life = 0);
  }
  draw() {
    push(),
      translate(this.x, this.y),
      this.shape(this.life),
      pop(),
      (this.life = this.life - 5);
  }
}
class Avatar {
  constructor() {
    (this.leftLegPos = { x: 0, y: 0 }),
      (this.leftKneePos = { x: 0, y: 0 }),
      (this.leftArmPos = { x: 0, y: 0 }),
      (this.leftShoulderPos = { x: 0, y: 0 }),
      (this.headAngle = 0),
      (this.leftLegAngle = 0),
      (this.leftArmAngle = 0),
      (this.leftShoulderAngle = 0),
      (this.leftKneeAngle = 0),
      (this.rightLegPos = { x: 0, y: 0 }),
      (this.rightKneePos = { x: 0, y: 0 }),
      (this.rightArmPos = { x: 0, y: 0 }),
      (this.rightShoulderPos = { x: 0, y: 0 }),
      (this.rightLegAngle = 0),
      (this.rightArmAngle = 0),
      (this.rightShoulderAngle = 0),
      (this.rightKneeAngle = 0),
      (this.hipAngle = 0),
      (this.centerX = 0),
      (this.centerY = 0),
      (this.bodyWidth = 0),
      (this.bodyHeight = 0);
  }
  calculate() {
    (this.headAngle = Math.atan2(
      몸관절[7].y - 몸관절[8].y,
      몸관절[7].x - 몸관절[8].x
    )),
      (this.shoulderAngle = Math.atan2(
        몸관절[12].y - 몸관절[11].y,
        몸관절[12].x - 몸관절[11].x
      )),
      (this.leftArmAngle = Math.atan2(
        몸관절[16].y - 몸관절[14].y,
        몸관절[16].x - 몸관절[14].x
      )),
      (this.leftShoulderAngle = Math.atan2(
        몸관절[14].y - 몸관절[12].y,
        몸관절[14].x - 몸관절[12].x
      )),
      (this.rightArmAngle = Math.atan2(
        몸관절[15].y - 몸관절[13].y,
        몸관절[15].x - 몸관절[13].x
      )),
      (this.rightShoulderAngle = Math.atan2(
        몸관절[13].y - 몸관절[11].y,
        몸관절[13].x - 몸관절[11].x
      )),
      (this.leftLegAngle = Math.atan2(
        몸관절[26].y - 몸관절[24].y,
        몸관절[26].x - 몸관절[24].x
      )),
      (this.leftKneeAngle = Math.atan2(
        몸관절[28].y - 몸관절[26].y,
        몸관절[28].x - 몸관절[26].x
      )),
      (this.rightLegAngle = Math.atan2(
        몸관절[25].y - 몸관절[23].y,
        몸관절[25].x - 몸관절[23].x
      )),
      (this.rightKneeAngle = Math.atan2(
        몸관절[27].y - 몸관절[25].y,
        몸관절[27].x - 몸관절[25].x
      )),
      (this.hipAngle = Math.atan2(
        몸관절[23].y - 몸관절[24].y,
        몸관절[23].x - 몸관절[24].x
      )),
      (this.centerX = (몸관절[23].x + 몸관절[24].x) / 2),
      (this.centerY = (몸관절[23].y + 몸관절[24].y) / 2);
    let t = this.centerX + Math.cos(this.hipAngle) * (엉덩이너비 / 2),
      e = this.centerY + Math.sin(this.hipAngle) * (엉덩이너비 / 2);
    (아바타관절[8] = { x: t, y: e }),
      (t = this.centerX - Math.cos(this.hipAngle) * (엉덩이너비 / 2)),
      (e = this.centerY - Math.sin(this.hipAngle) * (엉덩이너비 / 2)),
      (아바타관절[7] = { x: t, y: e });
    let s = this.centerX + Math.cos(this.hipAngle - PI / 2) * 몸통길이,
      i = this.centerY + Math.sin(this.hipAngle - PI / 2) * 몸통길이;
    (t =
      this.centerX +
      Math.cos(this.hipAngle - PI / 2) * (몸통길이 + 목길이 + 머리크기 / 2)),
      (e =
        this.centerY +
        Math.sin(this.hipAngle - PI / 2) * (몸통길이 + 목길이 + 머리크기 / 2)),
      (아바타관절[0] = { x: t, y: e }),
      (t = s + Math.cos(this.hipAngle) * (어깨너비 / 2)),
      (e = i + Math.sin(this.hipAngle) * (어깨너비 / 2)),
      (아바타관절[2] = { x: t, y: e }),
      (t = 아바타관절[2].x + Math.cos(this.rightShoulderAngle) * 오른팔길이1),
      (e = 아바타관절[2].y + Math.sin(this.rightShoulderAngle) * 오른팔길이1),
      (아바타관절[4] = { x: t, y: e }),
      (t = 아바타관절[4].x + Math.cos(this.rightArmAngle) * 오른팔길이2),
      (e = 아바타관절[4].y + Math.sin(this.rightArmAngle) * 오른팔길이2),
      (아바타관절[6] = { x: t, y: e }),
      (t = 아바타관절[8].x + Math.cos(this.rightLegAngle) * 오른다리길이1),
      (e = 아바타관절[8].y + Math.sin(this.rightLegAngle) * 오른다리길이1),
      (아바타관절[10] = { x: t, y: e }),
      (t = 아바타관절[10].x + Math.cos(this.rightKneeAngle) * 오른다리길이2),
      (e = 아바타관절[10].y + Math.sin(this.rightKneeAngle) * 오른다리길이2),
      (아바타관절[12] = { x: t, y: e }),
      (t = s - Math.cos(this.hipAngle) * (어깨너비 / 2)),
      (e = i - Math.sin(this.hipAngle) * (어깨너비 / 2)),
      (아바타관절[1] = { x: t, y: e }),
      (t = 아바타관절[1].x + Math.cos(this.leftShoulderAngle) * 왼팔길이1),
      (e = 아바타관절[1].y + Math.sin(this.leftShoulderAngle) * 왼팔길이1),
      (아바타관절[3] = { x: t, y: e }),
      (t = 아바타관절[3].x + Math.cos(this.leftArmAngle) * 왼팔길이2),
      (e = 아바타관절[3].y + Math.sin(this.leftArmAngle) * 왼팔길이2),
      (아바타관절[5] = { x: t, y: e }),
      (t = 아바타관절[7].x + Math.cos(this.leftLegAngle) * 왼다리길이1),
      (e = 아바타관절[7].y + Math.sin(this.leftLegAngle) * 왼다리길이1),
      (아바타관절[9] = { x: t, y: e }),
      (t = 아바타관절[9].x + Math.cos(this.leftKneeAngle) * 왼다리길이2),
      (e = 아바타관절[9].y + Math.sin(this.leftKneeAngle) * 왼다리길이2),
      (아바타관절[11] = { x: t, y: e });
  }
  drawBody() {
    push(),
      translate(this.centerX, this.centerY),
      rotate(this.hipAngle),
      몸통(),
      pop();
  }
  drawLeftLeg() {
    push(),
      translate(this.centerX, this.centerY),
      rotate(this.hipAngle),
      translate(-엉덩이너비 / 2, 0),
      push(),
      rotate(this.leftLegAngle - PI / 2 - this.hipAngle),
      왼다리1(),
      연결점표시 && drawJoint(),
      translate(0, 왼다리길이1),
      rotate(this.leftKneeAngle - this.leftLegAngle),
      왼다리2(),
      연결점표시 && drawJoint(),
      pop(),
      pop();
  }
  drawRightLeg() {
    push(),
      translate(this.centerX, this.centerY),
      rotate(this.hipAngle),
      translate(엉덩이너비 / 2, 0),
      push(),
      rotate(this.rightLegAngle - PI / 2 - this.hipAngle),
      오른다리1(),
      연결점표시 && drawJoint(),
      translate(0, 오른다리길이1),
      rotate(this.rightKneeAngle - this.rightLegAngle),
      오른다리2(),
      연결점표시 && drawJoint(),
      pop(),
      pop();
  }
  drawLeftArm() {
    noStroke(),
      push(),
      translate(this.centerX, this.centerY),
      rotate(this.hipAngle),
      translate(-어깨너비 / 2, -몸통길이),
      push(),
      rotate(this.leftShoulderAngle - PI / 2),
      왼팔1(),
      연결점표시 && drawJoint(),
      translate(0, 왼팔길이1),
      rotate(this.leftArmAngle - this.leftShoulderAngle),
      왼팔2(),
      연결점표시 && drawJoint(),
      pop(),
      pop();
  }
  drawRightArm() {
    push(),
      translate(this.centerX, this.centerY),
      rotate(this.hipAngle),
      translate(어깨너비 / 2, -몸통길이),
      push(),
      translate(this.rightShoulderPos.x, this.rightShoulderPos.y),
      rotate(this.rightShoulderAngle - PI / 2),
      오른팔1(),
      연결점표시 && drawJoint(),
      translate(0, 오른팔길이1),
      rotate(this.rightArmAngle - this.rightShoulderAngle),
      오른팔2(),
      연결점표시 && drawJoint(),
      pop(),
      pop();
  }
  drawHead() {
    push(),
      translate(this.centerX, this.centerY),
      rotate(this.hipAngle),
      translate(0, -몸통길이 - 목길이),
      rotate(this.headAngle),
      머리(),
      연결점표시 && drawJoint(),
      pop();
  }
}
function drawJoint() {
  fill(255, 0, 0), ellipse(0, 0, 6, 6);
}
let 분류결과 = "없음",
  확률 = 0,
  model,
  maxPredictions,
  net,
  body = 0;
async function AI설정() {
  ml5.setBackend("webgl"),
    await initPrediction(),
    console.log("자세 모델을 불러왔습니다."),
    window.requestAnimationFrame(anim);
}
async function initPrediction() {
  let t;
  maxPredictions = (model = await tmPose.load(
    모델주소 + "model.json",
    모델주소 + "metadata.json"
  )).getTotalClasses();
}
async function anim(t) {
  await predict(), window.requestAnimationFrame(anim);
}
async function predict() {
  if (video && video.elt && video.loadedmetadata && model) {
    let { pose: t, posenetOutput: e } = await model.estimatePose(video.elt),
      s = await model.predict(e),
      i;
    for (let n of s) i ? n.probability > i.probability && (i = n) : (i = n);
    (분류결과 = i.className), (확률 = round(100 * i.probability));
  }
}
